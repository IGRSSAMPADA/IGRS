/**
 * Copyright (c) 2009-10 WIPRO INFOTECH. All Rights Reserved.
 *
 *  This software is the confidential and proprietary information of WIPRO
 *  ("Confidential Information"). You shall not
 *  disclose such Confidential Information and shall use it only in
 *  accordance with the terms of the license agreement you entered into
 *  with WIPRO.
 *
 * WIPRO MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE
 * SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. WIPRO SHALL NOT BE
 * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF
 * USING, MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS
 * DERIVATIVES.
 *
 * Customer specific copyright notice - NA
 */
package com.wipro.igrs.empmgmt.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Properties;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.upload.FormFile;

import com.wipro.igrs.baseaction.action.BaseAction;
import com.wipro.igrs.common.AuditInspectionConstant;
import com.wipro.igrs.empmgmt.bd.OfficalInfoBD;
import com.wipro.igrs.empmgmt.dto.EmpmgmtUploadDTO;
import com.wipro.igrs.empmgmt.dto.OfficalInfoDTO;
import com.wipro.igrs.empmgmt.dto.ServiceVerificationDTO;
import com.wipro.igrs.empmgmt.form.EmpmgmtUploadForm;
import com.wipro.igrs.empmgmt.rule.EmpMgmtRule;
import com.wipro.igrs.util.PropertiesFileReader;

//Added new common code for MIME Type check of Uploaded file
import com.wipro.igrs.common.mime.MIMECheck;
/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */

/**
* 
* EmpmgmtUploadAction.java <br>
* EmpmgmtUploadAction <br>
* 
* @version 1.0
* 
* @author <b>WIPRO JAVA TEAM</b> <br>
*         Created on 12-Apr-2008 <br>
*         Last Modified on 28-Mar-2013
*/
@SuppressWarnings({ "unused", "rawtypes", "unchecked" })
public class EmpmgmtUploadAction extends BaseAction {
	/*
	 * Generated Methods
	 */
	private Logger logger = (Logger) Logger
			.getLogger(EmpmgmtUploadAction.class);

	/**
	 * This is the main action called from the Struts framework.
	 * 
	 * @param mapping
	 *            The ActionMapping used to select this instance.
	 * @param form
	 *            The optional ActionForm bean for this request.
	 * @param request
	 *            The HTTP Request we are processing.
	 * @param response
	 *            The HTTP Response we are processing.
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,HttpSession session) {
		logger.debug("In Empupload Action Class");
		String forwardPage="empupload";
		ActionErrors errors = new ActionErrors();
		ActionForward forward = new ActionForward(); // return value
	//	HttpSession session = request.getSession(true);
		Properties prop=new Properties();
		String uploadDir="";
		/*InputStream input = null;
		try {
			input = new FileInputStream("resources.igrs");
			prop.load(input);
			
			if(prop.getProperty("EmployeeMgmtUploadPath")!=null){
				logger.debug("property set for EmployeeMgmtUploadPath is::::::::::"+prop.getProperty("EmployeeMgmtUploadPath"));
				uploadDir=prop.getProperty("EmployeeMgmtUploadPath");
			}
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}*/
		PropertiesFileReader prObj;
		try {
			prObj = PropertiesFileReader.getInstance("resources.igrs");
			uploadDir=prObj.getValue("EmployeeMgmtUploadPath");
			System.out.println(uploadDir);
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		
		EmpmgmtUploadForm empmgmtuploadForm = (EmpmgmtUploadForm) form;
		ArrayList errorList = new ArrayList();
	    
//		String filePath = getServlet().getServletContext().getRealPath("")
//				+ "/temp/";
		//String filePath = getServlet().getServletContext().getRealPath("");
		String filePath = null; 
		//String folName = "D:\\" +"Upload\\";
		String folNameSplit[]=uploadDir.split("-");
		String fol="";
		int k=0;
		for(int i=0;i<folNameSplit.length;i++){
			k=i+1;
			if(folNameSplit[i]!=null || folNameSplit[i]!=""){
			fol=fol.concat("\\").concat(folNameSplit[i]);
			File folde = new File(fol);
			filePath=fol;
			 if (!folde.exists()) 
			 {
	             folde.mkdirs();
	           
		     }else{
		     continue;
		     }
			}
		}
		
		
		
		
		/*File folde = new File(folNameSplit[0].concat(folNameSplit[1]));
		 if (!folde.exists()) 
		 {
             folde.mkdirs();
           
	     }
		File folder = new File(folNameSplit[0].concat(folNameSplit[1]).);
		 if (!folder.exists()) 
		 {
              folder.mkdirs();
            
	     }
		 File folder1 = new File(folName+"Employee Management\\"+"1");
         if (!folder1.exists())
             {
	              folder1.mkdirs();
             }*/
			 	/*else
			 	{
	            	  filePath="D:\\" +"Upload\\"+"Employee Management\\"+"1\\";
	              }*/
		//filePath="D:\\" +"Upload\\"+"Employee Mgmt\\";
		session.setAttribute("FilePath", filePath);
		EmpMgmtRule rule = null;
		EmpmgmtUploadDTO empUploadDTO = new EmpmgmtUploadDTO();
		OfficalInfoDTO officeDTO = new OfficalInfoDTO();
		OfficalInfoBD officalBD = null;
		ArrayList documentlist = null;
		String locale="";
		Locale currentLocale;
		if(session.getAttribute("org.apache.struts.action.LOCALE")!=null){
				currentLocale=(Locale)session.getAttribute("org.apache.struts.action.LOCALE");
				locale=currentLocale.toString();
				
			}
		int currFileSize = 0;
		if (request.getParameter("action") != null
				&& request.getParameter("action").equals("documents")) {
			try {
				officalBD = new OfficalInfoBD();
				documentlist = officalBD.getAllDocumentList(locale);
				session.setAttribute("documentList", documentlist);
				logger.debug("Loading Documents and fowarding to the next Page");
				forwardPage="empupload";
				if(session.getAttribute("attachment1")==null) {
					session.setAttribute("attachment1", new ArrayList());
				}
				else {
					ArrayList arrList = (ArrayList) session.getAttribute("attachment1");
					logger.debug(arrList);
				}
				logger.debug("forwardPage      "+forwardPage);
			} catch (Exception e) {
				logger.debug(e);
			}
		}

		if (empmgmtuploadForm!=null && empmgmtuploadForm.getAttachAction()!=null && empmgmtuploadForm.getAttachAction().equalsIgnoreCase("attach")) {

			if (session.getAttribute("attachment1") == null) {
				FormFile strFileName = empmgmtuploadForm.getTheFile();
				
				int size = strFileName.getFileSize();
				//String fileExt = getFileExtension(strFileName.getFileName());
				// Added new code for MIME type common - Rahul
				MIMECheck mimeCheck = new MIMECheck();
				String fileExt=mimeCheck.getFileExtension(strFileName.getFileName());
		        Boolean mime = mimeCheck.isValidMIME(strFileName);  // common code to check mime type and validation.
		        
		        //  new code finish 
				rule = new EmpMgmtRule();
				ArrayList list = new ArrayList();
				errorList = rule.validateFileType(fileExt, list);
				
				if(!mime){
		        	errorList
					.add("<li><font color="
							+ "red"
							+ ">Invalid MIME type. Please select another file./अमान्य फ़ाइल प्रकार. एक और फ़ाइल का चयन करें.</font></li>");
		        	request.setAttribute("errorsList", errorList);

					forwardPage="empupload";
					return mapping.findForward(forwardPage);
		        }
				else if (rule.isError()) {
					request.setAttribute("errorsList", errorList);

					forwardPage="empupload";

				} else if (size > AuditInspectionConstant.MAX_FILE_SIZE) {
					errorList
							.add("<li><font color="
									+ "red"
									+ ">File Size is Greater Than 10MB,Please Select Other File.</font></li>");
					request.setAttribute("errorsList", errorList);

					forwardPage="empupload";

				} else {

					try {
						File newFile = new File(filePath
								+ strFileName.getFileName());

						FileOutputStream fos = new FileOutputStream(newFile);

						fos.write(strFileName.getFileData());

						fos.close();
					} catch (IOException eIO) {
						logger.error(eIO.getMessage(), eIO);
						logger.debug("while uploading the file " + eIO);
						errorList.add("<li><font color=" + "red"
								+ ">Please contact Admin.</font></li>");
						request.setAttribute("errorsList", errorList);
					} catch (Exception ex) {
						logger.error(ex.getMessage(), ex);
						logger.debug("while uploading the file " + ex);
						errorList.add("<li><font color=" + "red"
								+ ">Please contact Admin.</font></li>");
						request.setAttribute("errorsList", errorList);
					}
					ArrayList lsUPloadDTO = new ArrayList();
					empUploadDTO.setFileName(strFileName.getFileName());// set
					empUploadDTO.setDocumenttype(empmgmtuploadForm
							.getDocumentType());
					empUploadDTO.setFileSize(size);
					empUploadDTO.setDocumentname(empmgmtuploadForm
							.getDocumentname());
					empUploadDTO.setFormFileObject(strFileName);
					try {
						empUploadDTO.setFileContents(strFileName.getFileData());
					} catch (Exception e) {
						logger.error(e.getMessage(), e);
					}
					lsUPloadDTO.add(empUploadDTO);
					session.setAttribute("attachment1", lsUPloadDTO);
				}
			} else {
				ArrayList arrList = (ArrayList) session
						.getAttribute("attachment1");

				// ArrayList arrForSession = new ArrayList();
				EmpmgmtUploadDTO UploadDTO = null;
				for (int i = 0; i < arrList.size(); i++) {
					UploadDTO = (EmpmgmtUploadDTO) arrList.get(i);
					currFileSize = currFileSize + UploadDTO.getFileSize();
				}
				try {
				documentlist = (ArrayList) session.getAttribute("documentList");
				FormFile forFile = empmgmtuploadForm.getTheFile();
				//String fileExt = getFileExtension(forFile.getFileName());
				MIMECheck mimeCheck = new MIMECheck();
				String fileExt=mimeCheck.getFileExtension(forFile.getFileName());
		        Boolean mime = mimeCheck.isValidMIME(forFile);  // common code to check mime type and validation.
		       
		        //  new code finish 
				rule = new EmpMgmtRule();
				UploadDTO = new EmpmgmtUploadDTO();
				if(!mime){
		        	errorList
					.add("<li><font color="
							+ "red"
							+ ">Invalid MIME type. Please select another file./अमान्य फ़ाइल प्रकार. एक और फ़ाइल का चयन करें.</font></li>");
		        	request.setAttribute("errorsList", errorList);

		        	return mapping.findForward(forwardPage);
				}
				UploadDTO.setFileName(forFile.getFileName());
				UploadDTO.setDocumenttype(empmgmtuploadForm.getDocumentType());
				UploadDTO.setDocumentname(empmgmtuploadForm.getDocumentname());
				UploadDTO.setDocTypeID(empmgmtuploadForm.getDocumentType());
				String docTypeLabel = getDocTypeLabel(documentlist, empmgmtuploadForm.getDocumentType());
				UploadDTO.setDocTypeLabel(docTypeLabel);
				UploadDTO.setFormFileObject(forFile);
				
				UploadDTO.setFileContents(forFile.getFileData());
				arrList.add(UploadDTO);
				errorList = rule.validateFileType(fileExt, arrList);
				
		        
				 if (rule.isError()) {
					request.setAttribute("errorsList", errorList);
					arrList.remove(arrList.size() - 1);
					forwardPage="empupload";
				} else {
					int size = forFile.getFileSize();
					currFileSize = currFileSize + size;

					if (currFileSize > AuditInspectionConstant.MAX_FILE_SIZE) {
						errorList
								.add("<li><font color="
										+ "red"
										+ ">File Size is Greater Than 10MB,Please Select Other File.</font></li>");
						request.setAttribute("errorsList", errorList);

						forwardPage="empupload";
					} else {
						// uploadForm.setSizeOfFile(currFileSize);
						if (!forFile.getFileName().equals("")) {

							try {
								File newFile = new File(filePath.concat("\\")
										+ forFile.getFileName());
								FileOutputStream fos = new FileOutputStream(
										newFile);
								fos.write(forFile.getFileData());
								fos.close();
							} catch (Exception ex) {
								logger.debug(ex);
							}
						}// End if

						session.setAttribute("attachment1", arrList);

					}// else END IF
				}// End Else Block
				}
				catch (NullPointerException e) {
					logger.info("null");
				} catch (Exception e) {
					logger.error(e.getMessage(), e);
				}
			}// else END IF

			return (mapping.findForward("empupload"));
		}// end if
			

		if (empmgmtuploadForm!=null && empmgmtuploadForm.getAttachAction()!=null && empmgmtuploadForm.getRemoveAction().equalsIgnoreCase("remove")) {

			ArrayList arrList = (ArrayList) session.getAttribute("attachment1");

			try {
				String param[] = request.getParameterValues("checkbox");
				if (param != null) {
					for (int i = 0; i < param.length; i++) {
						String checkedFileName = param[i];

						for (int j = 0; j < arrList.size(); j++) {
							EmpmgmtUploadDTO uploadFileDTO = (EmpmgmtUploadDTO) arrList
									.get(j);
							if (uploadFileDTO.getFileName().equalsIgnoreCase(
									checkedFileName)) {
								File newFile = new File(filePath
										+ checkedFileName);
								newFile.delete();
								arrList.remove(j);
							}
						}
					}
				}
			} catch (Exception ex) {
				logger.error(ex.getMessage(), ex);
			}

			session.setAttribute("attachment1", arrList);

			forwardPage="empupload";
		}

		return mapping.findForward(forwardPage);
	}

	/**
	 * @param documentlist
	 * @param documentType
	 * @return
	 */
	private String getDocTypeLabel(ArrayList documentlist, String documentType) {
		String retVal = "";
		try {
			ServiceVerificationDTO tempDTO;
			for (Object item : documentlist) {
				tempDTO = (ServiceVerificationDTO) item;
				if(tempDTO.getDocumentid().equals(documentType)) {
					retVal = tempDTO.getDocumentType();
					break;
				}
			}
		} catch (Exception e) {
		}
		return retVal;
	}

	/**
	 * @param fileName
	 * @return
	 */
	private String getFileExtension(String fileName) {
		int pos = fileName.lastIndexOf(".");
		String strExt = fileName.substring(pos + 1, fileName.length());
		return strExt;
	}
}