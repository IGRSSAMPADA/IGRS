/*
 * Generated by MyEclipse Struts Template path: templates/java/JavaClass.vtl
 */

package com.wipro.igrs.hrpayroll.hrp.action;

import java.sql.SQLException;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.wipro.igrs.baseaction.action.BaseAction;
import com.wipro.igrs.common.HrpayrollConstant;
import com.wipro.igrs.hrpayroll.hrp.bd.HRPayrollBD;
import com.wipro.igrs.hrpayroll.hrp.dto.GradeCadreDTO;
import com.wipro.igrs.hrpayroll.hrp.dto.SalaryDTO;
import com.wipro.igrs.hrpayroll.hrp.form.HrForm;
import com.wipro.igrs.hrpayroll.hrp.rule.ValidationRule;

public class HrAction extends BaseAction {
	private Logger logger = (Logger) Logger.getLogger(HrAction.class);

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,HttpSession session) {

		HrForm hrForm = (HrForm) form;
		String pageName = hrForm.getPageName();
		String pageAction = hrForm.getPageAction();

		String FORWARD_PAGE = null;
	//	HttpSession session = request.getSession();
		ArrayList errorsList = null;

		// logger.info("");
		try {
			ValidationRule rule = new ValidationRule();
			HRPayrollBD hrBD = new HRPayrollBD();
			/*
			 * EMPLOYEE GRADE CADRE SALARY MAPPING
			 * 
			 */

			if (pageName != null
					&& pageName.equalsIgnoreCase(HrpayrollConstant.EMPLOYEE)) // "employee"
			{
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.EMPLOYEE_GRADE_CADRE_MAP)) // "employeeGradeCadreMap"
				{
					FORWARD_PAGE = this.employeeGradeCadreMap(hrForm, request,
							session, rule, hrBD);
				}
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.EMPLOYEE_GRADE_CADRE_MAP_SAVE)) // "employeeGradeCadreMapSave"
				{
					FORWARD_PAGE = this.employeeGradeCadreMapSave(hrForm,
							request, session, rule, hrBD);

				}

				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.EMPLOYEE_GRADE_CADRE_MAP_SUBMIT)) // "employeeGradeCadreMapSubmit"
				{
					FORWARD_PAGE = this.employeeGradeCadreMapSubmit(hrForm,
							request, session, rule, hrBD);
				}
			}

			/*
			 * 
			 * SALARY MASTER COMPONENT MAPPING WITH GRADE & CADRE
			 */

			if (pageName != null
					&& pageName
							.equalsIgnoreCase(HrpayrollConstant.SALARYCOMPONENT_PAGENAME)) // "salary1"
			{

				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.SALARY_COMPONENT_ACTION)) // "salaryStart1"
				{
					FORWARD_PAGE = this.getGradeCadreList(hrForm, request,
							session, rule, hrBD);
				}
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.SALARY_COMPONENT_DISPLAY_ACTION)) // "salaryPaymentsDisplay1"
				{
					FORWARD_PAGE = this.getSalaryComponentList(hrForm, request,
							session, rule, hrBD);

				}
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.MAPPED_SALARY_COMPONENT_ACTION)) // "mappedSalaryComponent";
				{
					FORWARD_PAGE = this.mappedSalaryComponent(hrForm, request,
							session, rule, hrBD);
				}
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.SALARY_COMPONENTS_VIEW_ACTION)) // "salaryPaymentsDisplay2"
				{
					FORWARD_PAGE = this.getSalaryComponentListForView(hrForm,
							request, session, rule, hrBD);
				}
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.SALARY_START_DISPLAY)) // "salaryStartDisplay"
				{
					FORWARD_PAGE = this.salaryStartDisplay(hrForm, request,
							session, rule, hrBD);
				}

			}

			/**
			 * SALARY MASTER
			 */
			if (pageName != null
					&& pageName.equalsIgnoreCase(HrpayrollConstant.SALARY)) // "salary"
			{
				// ============== GENERIC FOR SALARY MASTER ===================
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.SALARY_START)) // "salaryStart"
				{
					FORWARD_PAGE = this.salaryStart(hrForm, request, session,
							rule, hrBD);
				}

				// ================== SALARY COMPONENTS SHOW AT ORG. LEVEL
				// =========================
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.SALARY_COMPONENTS_SHOW)) // "salaryComponentsShow"
				{
					FORWARD_PAGE = this.salaryComponentsShow(hrForm, request,
							session, rule, hrBD);
				}
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.SALARY_COMPONENTS_SAVE)) // "salaryComponentsSave"
				{
					FORWARD_PAGE = this.salaryComponentsSave(hrForm, request,
							session, rule, hrBD);
				}

				// ==================== PAYMENTS =========================
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.SALARY_PAYMENTS_DISPLAY)) // "salaryPaymentsDisplay"
				{
					FORWARD_PAGE = this.showPaymentsDisplay(hrForm, request,
							session, rule, hrBD);
				}
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.SALARY_PAYMENTS_SAVE)) // "salaryPaymentsSave"
				{
					FORWARD_PAGE = this.savePaymentsDisplay(hrForm, request,
							session, rule, hrBD);
				}

				// ==================== TREASURY =========================
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.SALARY_TREASURY_DISPLAY)) // "salaryTreasuryDisplay"
				{
					FORWARD_PAGE = this.showTreasuryDisplay(hrForm, request,
							session, rule, hrBD);

				}
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.SALARY_TREASURY_SAVE)) // "salaryTreasurySave"
				{
					FORWARD_PAGE = this.saveTreasurySave(hrForm, request,
							session, rule, hrBD);
				}
				// ==================== DEDUCTIONS =========================
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.SALARY_DEDUCTIONS_DISPLAY)) // "salaryDeductionsDisplay"
				{
					FORWARD_PAGE = this.showDeductionsDisplay(hrForm, request,
							session, rule, hrBD);
				}
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.SALARY_DEDUCTIONS_SAVE)) // "salaryDeductionsSave"
				{
					FORWARD_PAGE = this.saveDeductionsDisplay(hrForm, request,
							session, rule, hrBD);
				}
			}
			/**
			 * HR- GRADE&CADRE MAPPING
			 * 
			 */
			if (pageName != null
					&& pageName.equalsIgnoreCase(HrpayrollConstant.GRADE_CADRE)) // "gradeCadre"
			{

				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.GRADE_CADRE_MAP_DISPLAY)) // "gradeCadreMapDisplay"
				{
					FORWARD_PAGE = this.gradeCadreMapDisplay(hrForm, request,
							rule, hrBD, session);
				}
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.GRADE_CADRE_MAP_SAVE)) // "gradeCadreMapSave"
				{
					FORWARD_PAGE = this.gradeCadreMapSave(hrForm, request,
							rule, hrBD);
				}
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.GRADE_CADRE_MAP_SEARCH)) // "gradeCadreMapSearch"
				{
					FORWARD_PAGE = this.gradeCadreMapSearch(hrForm, request,
							rule, hrBD, session);
				}
			}
			/* ===================================================================================================================== */
			/*
			 * 
			 * 
			 * HR - CADRE MASTER
			 * 
			 * 
			 */
			if (pageName != null
					&& pageName.equalsIgnoreCase(HrpayrollConstant.CADRE)) // "cadre"
			{
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.CADRE_MASTER_DISPLAY)) // "cadreMasterDisplay"
				{
					FORWARD_PAGE = this.cadreMasterDisplay(hrForm, request,
							session, rule, hrBD);
				} else if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.CADRE_MASTER_SAVE_ADD)) // "cadreMasterSaveAdd"
				{
					FORWARD_PAGE = this.cadreMasterSaveAdd(hrForm, request,
							session, rule, hrBD);
				} else if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.CADRE_MASTER_SAVE_ONLY)) // "cadreMasterSaveOnly"
				{
					FORWARD_PAGE = this.cadreMasterSaveOnly(hrForm, request,
							session, rule, hrBD);
				} else if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.CADRE_MASTER_EDIT)) // "cadreMasterEdit"
				{
					FORWARD_PAGE = this.cadreMasterEdit(hrForm, request,
							session, rule, hrBD);
				}
			}
			/* ===================================================================================================================== */
			/*
			 * 
			 * 
			 * HR - GRADE MASTER
			 * 
			 */
			else if (pageName != null
					&& pageName.equalsIgnoreCase(HrpayrollConstant.GRADE)) // "grade"
			{

				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.GRADE_MASTER_DISPLAY)) // "gradeMasterDisplay"
				{
					FORWARD_PAGE = this.gradeMasterDisplay(hrForm, request,
							session, rule, hrBD);
				} else if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.GRADE_MASTER_SAVE_ADD)) // "gradeMasterSaveAdd"
				{
					FORWARD_PAGE = this.gradeMasterSaveAdd(hrForm, request,
							session, rule, hrBD);
				} else if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.GRADE_MASTER_SAVE_ONLY)) // "gradeMasterSaveOnly"
				{
					FORWARD_PAGE = this.gradeMasterSaveOnly(hrForm, request,
							session, rule, hrBD);
				} else if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.GRADE_MASTER_EDIT)) // "gradeMasterEdit"))
				{
					FORWARD_PAGE = this.gradeMasterEdit(hrForm, request,
							session, rule, hrBD);
				}
			}
			/* ===================================================================================================================== */
			/*
			 * 
			 * HR - LEAVE MASTER
			 * 
			 */
			else if (pageName != null
					&& pageName.equalsIgnoreCase(HrpayrollConstant.LEAVE)) // "leave"
			{

				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.LEAVE_MASTER_DISPLAY)) // "leaveMasterDisplay"))
				{
					FORWARD_PAGE = this.leaveMasterDisplay(hrForm, request,
							session, rule, hrBD);
				}
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.LEAVE_MASTER_SAVE_ADD)) // "leaveMasterSaveAdd"))
				{
					FORWARD_PAGE = this.leaveMasterSaveAdd(hrForm, request,
							session, rule, hrBD);
				}
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.LEAVE_MASTER_SAVE_ONLY)) // "leaveMasterSaveOnly"))
				{
					FORWARD_PAGE = this.leaveMasterSaveOnly(hrForm, request,
							session, rule, hrBD);
				}
				if (pageAction != null
						&& pageAction
								.equalsIgnoreCase(HrpayrollConstant.LEAVE_MASTER_EDIT)) // "leaveMasterEdit"))
				{
					FORWARD_PAGE = this.leaveMasterEdit(hrForm, request,
							session, rule, hrBD);
				}
				/*
				 * if(pageAction != null &&
				 * pageAction.equalsIgnoreCase(HrpayrollConstant.LEAVE_MASTER_DELETE))
				 * //"leaveMasterDelete")) { FORWARD_PAGE =
				 * this.leaveMasterDelete(hrForm, request, rule, hrBD); }
				 */
			}
			// ERRORS
			logger.info("rule.getError():" + rule.getError());
			logger.info("errorsList :" + errorsList);

		}

		catch (SQLException e) {
			logger.info("SQLException occcured");
			FORWARD_PAGE = HrpayrollConstant.DB_ERROR;
		} catch (Exception e) {
			logger.info("General Exception Occurred" + e);
			e.printStackTrace();
		}
		if (FORWARD_PAGE == HrpayrollConstant.DB_ERROR) {
			logger.info("FORWARD_PAGE:" + FORWARD_PAGE);
			logger.info("SQLException occcured");
			errorsList = new ArrayList();
			errorsList
					.add("SQLException Occurred!! Check the Log file to Debug");
			logger.info("---> errorsList!=null :" + (errorsList != null));
			FORWARD_PAGE = HrpayrollConstant.ERRORS; // "error";
			session.setAttribute(HrpayrollConstant.ERRORS, errorsList);
			return mapping.findForward(FORWARD_PAGE);
		}
		if (FORWARD_PAGE == null || FORWARD_PAGE == HrpayrollConstant.ERRORS) {
			// logger.info("---> errorsList!=null :"+errorsList != null);
			FORWARD_PAGE = HrpayrollConstant.ERRORS; // "error";
			session.setAttribute(HrpayrollConstant.ERRORS, errorsList);
		}

		logger.info("NOW FORWARDING TO :" + FORWARD_PAGE);
		return mapping.findForward(FORWARD_PAGE);
	}

	/** ********************* CADRE MASTER METHODS **************************** */
	/**
	 * Method : cadreMasterDisplay Description : Displays All Cadres from
	 * IGRS_EMP_CADRE_MASTER table
	 * 
	 * @param cadreName :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */

	private String cadreMasterDisplay(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		String pageAction = hrForm.getPageAction();
		ArrayList cadreList = hrBD.displayCadres();
		String cadreTotalPosts = hrBD.getCadrePostsCount() + "";
		String FORWARD_PAGE = HrpayrollConstant.CADRE_MASTER_DISPLAY; // //"cadreMasterDisplay"
		// HttpSession session = request.getSession();

		session
				.setAttribute(HrpayrollConstant.SESSION_CADRE_DISPLAY,
						cadreList); // "cadreDisplay"
		// session.setAttribute(HrpayrollConstant.SESSION_CADRE_COUNTS,cadreList.size()+"");
		// //"cadreCounts"
		session.setAttribute(HrpayrollConstant.SESSION_CADRE_TOTAL_POSTS,
				cadreTotalPosts); // "cadreTotalPosts1"
		logger.info("rule.getError():" + rule.getError());
		return FORWARD_PAGE;
	}

	/**
	 * Method : cadreMasterSaveAdd Description : Save Cadre and Displays All
	 * Cadres to IGRS_EMP_CADRE_MASTER table
	 * 
	 * @param cadreName :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String cadreMasterSaveAdd(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		ArrayList errorsList = rule.validateCadreMasterAdd(hrForm);
		if (rule.getError() || (errorsList != null && errorsList.size() > 0))
			request.setAttribute(HrpayrollConstant.ERRORS, errorsList);
		else {
			String userId = (String) session.getAttribute("UserId");
			boolean b = hrBD.insertNewCadre(hrForm.getCadreDTO(), userId);
			logger.info("Record Inserted :" + b);
		}
		ArrayList cadreList = hrBD.displayCadres();
		String cadreTotalPosts = hrBD.getCadrePostsCount() + "";
		session
				.setAttribute(HrpayrollConstant.SESSION_CADRE_DISPLAY,
						cadreList); // "cadreDisplay"
		// session.setAttribute(HrpayrollConstant.SESSION_CADRE_COUNTS,cadreList.size()+"");
		// //"cadreCounts"
		session.setAttribute(HrpayrollConstant.SESSION_CADRE_TOTAL_POSTS,
				cadreTotalPosts); // "cadreTotalPosts"
		String FORWARD_PAGE = HrpayrollConstant.CADRE_MASTER_SAVE_ADD; // "cadreMasterSaveAdd"
		return FORWARD_PAGE;
	}

	/**
	 * Method : cadreMasterSaveOnly Description : Save Cadre to
	 * IGRS_EMP_CADRE_MASTER table
	 * 
	 * @param cadreName :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String cadreMasterSaveOnly(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		ArrayList errorsList = rule.validateCadreMasterAdd(hrForm);
		if (rule.getError() || (errorsList != null && errorsList.size() > 0))
			request.setAttribute(HrpayrollConstant.ERRORS, errorsList);
		else {
			String userId = (String) session.getAttribute("UserId");
			boolean b = hrBD.insertNewCadre(hrForm.getCadreDTO(), userId);
			logger.info("Record Inserted :" + b);
		}
		ArrayList cadreList = hrBD.displayCadres();
		String cadreTotalPosts = hrBD.getCadrePostsCount() + "";
		String FORWARD_PAGE = HrpayrollConstant.CADRE_MASTER_SAVE_ONLY; // "cadreMasterSaveOnly"
		logger.info("Forward Page : " + FORWARD_PAGE);

		session
				.setAttribute(HrpayrollConstant.SESSION_CADRE_DISPLAY,
						cadreList); // "cadreDisplay"
		// session.setAttribute(HrpayrollConstant.SESSION_CADRE_COUNTS,cadreList.size()+"");
		// //"cadreCounts"
		session.setAttribute(HrpayrollConstant.SESSION_CADRE_TOTAL_POSTS,
				cadreTotalPosts); // "cadreTotalPosts"
		return FORWARD_PAGE;
	}

	/**
	 * Method : cadreMasterEdit Description : Updates All Cadres to
	 * IGRS_EMP_CADRE_MASTER table
	 * 
	 * @param cadreName :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String cadreMasterEdit(HrForm hrForm, HttpServletRequest request,
			HttpSession session, ValidationRule rule, HRPayrollBD hrBD)
			throws Exception {
		ArrayList errorsList = rule.validateCadreMasterEdit(hrForm);
		if (rule.getError() || (errorsList != null && errorsList.size() > 0))
			request.setAttribute(HrpayrollConstant.ERRORS, errorsList);
		else {
			String userId = (String) session.getAttribute("UserId");
			boolean b = hrBD.editCadres(hrForm.getCadreDTO(), userId);
			logger.info("Records Updated :" + b);
		}
		ArrayList cadreList = hrBD.displayCadres();
		String cadreTotalPosts = hrBD.getCadrePostsCount() + "";
		String FORWARD_PAGE = HrpayrollConstant.CADRE_MASTER_DISPLAY; // "cadreMasterDisplay"
		session
				.setAttribute(HrpayrollConstant.SESSION_CADRE_DISPLAY,
						cadreList); // "cadreDisplay"
		// session.setAttribute(HrpayrollConstant.SESSION_CADRE_COUNTS,cadreList.size()+"");
		// //"cadreCounts"
		session.setAttribute(HrpayrollConstant.SESSION_CADRE_TOTAL_POSTS,
				cadreTotalPosts); // "cadreTotalPosts"

		return FORWARD_PAGE;
	}

	/**
	 * *************************** GRADE MASTER METHODS
	 * **************************
	 */
	/**
	 * Method : gradeMasterDisplay Description : Display All Grades From
	 * IGRS_EMP_CADRE_MASTER table
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String gradeMasterDisplay(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		ArrayList gradeList = hrBD.displayGrades();
		// HttpSession session = request.getSession();
		if (gradeList.size() > 0)
			session.setAttribute(HrpayrollConstant.SESSION_GRADE_DISPLAY,
					gradeList); // "gradeDisplay"
		logger.info("gradeList:" + gradeList);
		String FORWARD_PAGE = HrpayrollConstant.GRADE_MASTER_DISPLAY; // "gradeMasterDisplay"
		return FORWARD_PAGE;
	}

	/**
	 * Method : gradeMasterSaveAdd Description : Save Grade and Displays All
	 * Grades From IGRS_EMP_GRADE_MASTER table
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String gradeMasterSaveAdd(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		ArrayList errorsList = rule.validateGradeMasterAdd(hrForm);
		if (rule.getError() || (errorsList != null && errorsList.size() > 0))
			request.setAttribute(HrpayrollConstant.ERRORS, errorsList);
		else {
			String userId = (String) session.getAttribute("UserId");
			boolean b = hrBD.insertNewGrade(hrForm.getGradeDTO(), userId);
			logger.info("Record Inserted :" + b);
		}
		ArrayList gradeList = hrBD.displayGrades();
		String FORWARD_PAGE = HrpayrollConstant.GRADE_MASTER_SAVE_ADD; // "gradeMasterSaveAdd";
		if (gradeList.size() > 0)
			session.setAttribute(HrpayrollConstant.SESSION_GRADE_DISPLAY,
					gradeList); // "gradeDisplay"
		return FORWARD_PAGE;
	}

	/**
	 * Method : gradeMasterSaveOnly Description : Save Grade to
	 * IGRS_EMP_GRADE_MASTER table
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String gradeMasterSaveOnly(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		ArrayList errorsList = rule.validateGradeMasterAdd(hrForm);
		if (rule.getError() || (errorsList != null && errorsList.size() > 0))
			request.setAttribute(HrpayrollConstant.ERRORS, errorsList);
		else {
			String userId = (String) session.getAttribute("UserId");
			boolean b = hrBD.insertNewGrade(hrForm.getGradeDTO(), userId);
			logger.info("Record Inserted :" + b);
		}
		ArrayList gradeList = hrBD.displayGrades();
		logger.info("size : " + gradeList.size());
		String FORWARD_PAGE = HrpayrollConstant.GRADE_MASTER_SAVE_ONLY; // "gradeMasterSaveOnly"
		if (gradeList.size() > 0)
			session.setAttribute(HrpayrollConstant.SESSION_GRADE_DISPLAY,
					gradeList); // "gradeDisplay"
		return FORWARD_PAGE;
	}

	/**
	 * Method : gradeMasterEdit Description : Delete Grades From
	 * IGRS_EMP_GRADE_MASTER table
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String gradeMasterEdit(HrForm hrForm, HttpServletRequest request,
			HttpSession session, ValidationRule rule, HRPayrollBD hrBD)
			throws Exception {
		ArrayList errorsList = rule.validateGradeMasterEdit(hrForm);
		if (rule.getError() || (errorsList != null && errorsList.size() > 0))
			request.setAttribute(HrpayrollConstant.ERRORS, errorsList);
		else {
			String userId = (String) session.getAttribute("UserId");
			boolean flag = hrBD.editGrades(hrForm.getGradeDTO(), userId);
			logger.info("Records Edited : " + flag);
		}
		ArrayList gradeList = hrBD.displayGrades();
		String FORWARD_PAGE = HrpayrollConstant.GRADE_MASTER_DISPLAY; // "gradeMasterDisplay";
		if (gradeList.size() > 0)
			session.setAttribute(HrpayrollConstant.SESSION_GRADE_DISPLAY,
					gradeList); // "gradeDisplay"
		return FORWARD_PAGE;
	}

	/**
	 * ******************************* LEAVER MASTER
	 * **********************************
	 */
	/**
	 * Method : leaveMasterDisplay Description : Displays LeaveTypes From
	 * IGRS_EMP_LEAVE_TYPE_MASTER table
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String leaveMasterDisplay(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		ArrayList leaveList = hrBD.displayLeave();
		String FORWARD_PAGE = HrpayrollConstant.LEAVE_MASTER_DISPLAY; // "leaveMasterDisplay";
		if (leaveList.size() > 0) {
			session.setAttribute(HrpayrollConstant.SESSION_LEAVE_DISPLAY,
					leaveList); // "leaveDisplay"
			session.setAttribute(HrpayrollConstant.SESSION_LEAVE_COUNT,
					leaveList.size() + ""); // "leaveCount"
		}
		return FORWARD_PAGE;
	}

	/**
	 * Method : leaveMasterDisplay Description : Saves LeaveType and Displays
	 * all records From IGRS_EMP_LEAVE_TYPE_MASTER table
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String leaveMasterSaveAdd(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		ArrayList errorsList = rule.validateLeaveMasterAdd(hrForm);
		if (rule.getError() || (errorsList != null && errorsList.size() > 0))
			request.setAttribute(HrpayrollConstant.ERRORS, errorsList);
		else {
			String userId = (String) session.getAttribute("UserId");
			boolean b = hrBD.insertNewLeave(hrForm.getLeaveDTO(), userId);
			logger.info("Inserted " + b);
		}
		ArrayList leaveList = hrBD.displayLeave();
		String FORWARD_PAGE = HrpayrollConstant.LEAVE_MASTER_SAVE_ADD; // "leaveMasterSaveAdd";
		if (leaveList.size() > 0) {
			session.setAttribute(HrpayrollConstant.SESSION_LEAVE_DISPLAY,
					leaveList); // "leaveDisplay"
		}
		return FORWARD_PAGE;
	}

	/**
	 * Method : leaveMasterSaveOnly Description : Saves LeaveType to
	 * IGRS_EMP_LEAVE_TYPE_MASTER table
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String leaveMasterSaveOnly(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		ArrayList errorsList = rule.validateLeaveMasterAdd(hrForm);
		if (rule.getError() || (errorsList != null && errorsList.size() > 0))
			request.setAttribute(HrpayrollConstant.ERRORS, errorsList);
		else {
			String userId = (String) session.getAttribute("UserId");
			boolean b = hrBD.insertNewLeave(hrForm.getLeaveDTO(), userId);
			logger.info("Record Inserted :" + b);
		}
		ArrayList leaveList = hrBD.displayLeave();
		String FORWARD_PAGE = HrpayrollConstant.LEAVE_MASTER_SAVE_ONLY; // "leaveMasterSaveOnly";
		if (leaveList.size() > 0) {
			session.setAttribute(HrpayrollConstant.SESSION_LEAVE_DISPLAY,
					leaveList); // "leaveDisplay"
		}
		return FORWARD_PAGE;
	}

	/**
	 * Method : leaveMasterEdit Description : Updates the Edited LeaveType to
	 * IGRS_EMP_LEAVE_TYPE_MASTER table
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String leaveMasterEdit(HrForm hrForm, HttpServletRequest request,
			HttpSession session, ValidationRule rule, HRPayrollBD hrBD)
			throws Exception {
		String FORWARD_PAGE = "";
		ArrayList errorsList = rule.validateLeaveMasterEdit(hrForm);
		if (rule.getError() || (errorsList != null && errorsList.size() > 0))
			request.setAttribute(HrpayrollConstant.ERRORS, errorsList);
		else {
			String userId = (String) session.getAttribute("UserId");
			boolean b = hrBD.editLeaveMaster(hrForm.getLeaveDTO(), userId);
			logger.info("Records Edited : " + b);
		}
		ArrayList leaveList = hrBD.displayLeave();
		if (leaveList.size() > 0) {
			session.setAttribute(HrpayrollConstant.SESSION_LEAVE_DISPLAY,
					leaveList); // "leaveDisplay"
		}
		FORWARD_PAGE = HrpayrollConstant.LEAVE_MASTER_DISPLAY; // "leaveMasterDisplay";
		return FORWARD_PAGE;
	}

	/**
	 * *******************************SALARY
	 * MASTER*********************************************
	 */
	/**
	 * Method : salaryStart Description : Loads all Grades and Cadres for Salary
	 * Master functionality from IGRS_EMP_GRADE_MASTER and
	 * IGRS_EMP_CADRES_MASTER
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String salaryStart(HrForm hrForm, HttpServletRequest request,
			HttpSession session, ValidationRule rule, HRPayrollBD hrBD)
			throws Exception {
		session.removeAttribute(HrpayrollConstant.SESSION_SALARY_GRADE_ID); // "gradeId";
		session.removeAttribute(HrpayrollConstant.SESSION_SALARY_CADRE_ID); // "cadreId";
		session.removeAttribute(HrpayrollConstant.SESSION_SALARY_CADRE_NAME); // "cadreName";
		session.removeAttribute(HrpayrollConstant.SESSION_SALARY_GRADE_NAME); // "gradeName";
		session.removeAttribute(HrpayrollConstant.SESSION_SALARY_GRADE_LIST); // "salaryGradeList";
		session.removeAttribute(HrpayrollConstant.SESSION_SALARY_CADRE_LIST); // "salaryCadreList";

		ArrayList gradeList = null;
		ArrayList cadreList = null;
		String cadreName = null;
		String gradeName = null;
		SalaryDTO salDTO = hrForm.getSalaryDTO();
		// gradeList
		if (gradeList == null)
			gradeList = hrBD.fetchGrades();
		String gradeId = salDTO.getGradeId();

		if (gradeId != null && !"".equals(gradeId)) {
			gradeName = hrBD.getGradeName(gradeId);
			cadreList = hrBD.fetchCadresForGrade(salDTO.getGradeId());
		}
		String cadreId = salDTO.getCadreId();
		if (cadreId != null && !"".equals(cadreId))
			cadreName = hrBD.getCadreName(cadreId);

		if (gradeList != null)
			session.setAttribute(HrpayrollConstant.SESSION_SALARY_GRADE_LIST,
					gradeList); // "salaryGradeList"
		if (cadreList != null)
			session.setAttribute(HrpayrollConstant.SESSION_SALARY_CADRE_LIST,
					cadreList); // salaryCadreList
		String FORWARD_PAGE = HrpayrollConstant.SALARY_START; // "salaryStart"
		return FORWARD_PAGE;
	}

	/**
	 * Method : salaryComponentsShow Description : Shows Salary Components List
	 * from IGRS_EMP_SALARY_MASTER
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String salaryComponentsShow(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		// HttpSession session = request.getSession();
		ArrayList gradeList = null;
		ArrayList cadreList = null;
		String cadreName = null;
		String gradeName = null;
		String FORWARD_PAGE = null;

		SalaryDTO salDTO = hrForm.getSalaryDTO();
		ArrayList componentsList = null;
		ArrayList gradeRecord = null;
		if (salDTO.getGradeId() != null) {
			gradeRecord = hrBD.displayGradeDetails(salDTO.getGradeId());
			cadreList = hrBD.fetchCadresForGrade(salDTO.getGradeId());

			if (salDTO.getCadreId() != null) {
				if (salDTO.getComponentType().equalsIgnoreCase("P"))
					componentsList = hrBD.fetchPaymentDetails(salDTO
							.getGradeId(), salDTO.getCadreId());
				if (salDTO.getComponentType().equalsIgnoreCase("A"))
					componentsList = hrBD.fetchDeductionDetails(salDTO
							.getGradeId(), salDTO.getCadreId());
				if (salDTO.getComponentType().equalsIgnoreCase("T"))
					componentsList = hrBD.fetchTreasuryDetails(salDTO
							.getGradeId(), salDTO.getCadreId());
			}
			if (gradeRecord != null)
				session.setAttribute(
						HrpayrollConstant.SESSION_SALARY_ONE_GRADE_RECORD,
						gradeRecord); // "gradeRecord"
			if (componentsList != null)
				session.setAttribute(
						HrpayrollConstant.SESSION_SALARY_COMPONENTS_LIST,
						componentsList); // "salaryComponentsList"
			if (cadreList != null)
				session.setAttribute(
						HrpayrollConstant.SESSION_SALARY_CADRE_LIST, cadreList); // salaryCadreList
		}
		return FORWARD_PAGE;
	}

	/**
	 * Method : salaryComponentsSave Description : Saves Salary Components List
	 * to IGRS_EMP_SALARY_MASTER
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String salaryComponentsSave(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		logger.info("--- in SALARY COMPONENTS SAVE ---");
		boolean updated = false;
		String FORWARD_PAGE = "";
		SalaryDTO salDTO = hrForm.getSalaryDTO();
		logger.info(salDTO.getComponentType());
		if (salDTO.getComponentType().equalsIgnoreCase("P"))
			updated = hrBD.updatePaymentComponents(salDTO);
		else if (salDTO.getComponentType().equalsIgnoreCase("A"))
			updated = hrBD.updateDeductionComponents(salDTO);
		else if (salDTO.getComponentType().equalsIgnoreCase("T"))
			updated = hrBD.updateTreasuryComponents(salDTO);
		if (updated)
			FORWARD_PAGE = HrpayrollConstant.SALARY_COMPONENTS_SHOW; // "salaryComponentsShow";
		else
			FORWARD_PAGE = HrpayrollConstant.ERRORS; // "error";
		return FORWARD_PAGE;
	}

	/** SALARY PAYMENTS * */
	/**
	 * Method : showPaymentsDisplay Description : Shows Salary Payment
	 * Components List from IGRS_EMP_SALARY_MASTER
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String showPaymentsDisplay(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		session
				.removeAttribute(HrpayrollConstant.SESSION_SALARY_ONE_GRADE_RECORD);
		session.removeAttribute(HrpayrollConstant.SESSION_SALARY_PAYMENT_LIST);
		session.removeAttribute(HrpayrollConstant.SESSION_SALARY_PAYMENT_GROSS);
		session.removeAttribute(HrpayrollConstant.SESSION_SALARY_CADRE_LIST);

		ArrayList paymentList = null;
		ArrayList gradeRecord = null;
		ArrayList cadreList = null;
		String grossSalary = null;
		SalaryDTO salDTO = hrForm.getSalaryDTO();
		// HttpSession session = request.getSession();
		ArrayList errorsList = rule.validateSalaryDisplay(hrForm);
		if (rule.getError() || (errorsList != null && errorsList.size() > 0))
			request.setAttribute(HrpayrollConstant.ERRORS, errorsList);
		if (salDTO.getGradeId() != null) {
			gradeRecord = hrBD.displayGradeDetails(salDTO.getGradeId());
			cadreList = hrBD.fetchCadresForGrade(salDTO.getGradeId());
			if (salDTO.getCadreId() != null) {
				paymentList = hrBD.fetchPaymentDetails(salDTO.getGradeId(),
						salDTO.getCadreId());
				if (paymentList.size() > 0)
					grossSalary = hrBD.getPaymentsTotal(salDTO.getGradeId(),
							salDTO.getCadreId());
			}
		}
		if (gradeRecord != null)
			session.setAttribute(
					HrpayrollConstant.SESSION_SALARY_ONE_GRADE_RECORD,
					gradeRecord); // "gradeRecord"
		if (paymentList.size() > 0) {
			session.setAttribute(HrpayrollConstant.SESSION_SALARY_PAYMENT_LIST,
					paymentList); // "salaryPaymentList"
			session
					.setAttribute(
							HrpayrollConstant.SESSION_SALARY_PAYMENT_GROSS,
							grossSalary); // "salaryPaymentGross"
		}
		if (cadreList != null)
			session.setAttribute(HrpayrollConstant.SESSION_SALARY_CADRE_LIST,
					cadreList); // salaryCadreList
		String FORWARD_PAGE = HrpayrollConstant.SALARY_PAYMENTS_DISPLAY;
		return FORWARD_PAGE;
	}

	/**
	 * Method : savePaymentsDisplay Description : Saves Salary Payment
	 * Components List to IGRS_EMP_SALARY_MASTER
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String savePaymentsDisplay(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		logger.info("-- in SAVE PAYMENTS --");
		// HttpSession session = request.getSession();
		SalaryDTO salDTO = hrForm.getSalaryDTO();
		String arr[] = salDTO.getComponentIdArr();
		String FORWARD_PAGE = "";
		if (arr != null) {
			logger.info("list size :" + arr.length);
			for (int i = 0; i < arr.length; i++) {

				logger.info(salDTO.getComponentIdArr()[i] + ",");
				logger.info(salDTO.getComponentNameArr()[i] + ",");
				logger.info(salDTO.getComponentValueArr()[i]);
			}
			logger.info("Grade Id :" + salDTO.getGradeId());
			logger.info("---Cadre ID :" + salDTO.getCadreId());

			// String gradeId = salDTO.getGradeId();
			// String cadreId = salDTO.getCadreId();

			request.setAttribute("gradeName", hrBD.getGradeName(salDTO
					.getGradeId()));
			request.setAttribute("cadreName", hrBD.getCadreName(salDTO
					.getCadreId()));

			boolean flag = hrBD.updatePaymentComponents(salDTO);
			if (flag)
				FORWARD_PAGE = HrpayrollConstant.SALARY_PAYMENTS_SHOW_SAVED;// "salaryPaymentsShowSaved"
			else
				FORWARD_PAGE = HrpayrollConstant.ERRORS;// "error"
		}
		return FORWARD_PAGE;
	}

	/** SALARY DEDUCTIONS * */
	/**
	 * Method : showDeductionsDisplay Description : Shows Salary AG Deduction
	 * Components List from IGRS_EMP_SALARY_MASTER
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String showDeductionsDisplay(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		logger.info("--- in DEDUCTIONS DISPLAY ---");
		session
				.removeAttribute(HrpayrollConstant.SESSION_SALARY_ONE_GRADE_RECORD);
		session
				.removeAttribute(HrpayrollConstant.SESSION_SALARY_DEDUCTION_LIST);
		session
				.removeAttribute(HrpayrollConstant.SESSION_SALARY_DEDUCTION_TOTAL);
		session.removeAttribute(HrpayrollConstant.SESSION_SALARY_CADRE_LIST);
		ArrayList deductionList = null;
		ArrayList gradeList = null;
		ArrayList cadreList = null;
		ArrayList gradeRecord = null;
		String deductionTotal = null;
		SalaryDTO salDTO = hrForm.getSalaryDTO();
		// HttpSession session = request.getSession();
		ArrayList errorsList = rule.validateSalaryDisplay(hrForm);
		if (rule.getError() || (errorsList != null && errorsList.size() > 0))
			request.setAttribute(HrpayrollConstant.ERRORS, errorsList);
		if (salDTO.getGradeId() != null) {
			gradeRecord = hrBD.displayGradeDetails(salDTO.getGradeId());
			cadreList = hrBD.fetchCadresForGrade(salDTO.getGradeId());
			if (salDTO.getCadreId() != null) {
				deductionList = hrBD.fetchDeductionDetails(salDTO.getGradeId(),
						salDTO.getCadreId());
				if (deductionList.size() > 0)
					deductionTotal = hrBD.getDeductionTotal(
							salDTO.getGradeId(), salDTO.getCadreId());
			}
		}
		if (gradeRecord != null)
			session.setAttribute(
					HrpayrollConstant.SESSION_SALARY_ONE_GRADE_RECORD,
					gradeRecord); // "gradeRecord"
		if (deductionList.size() > 0) {
			session.setAttribute(
					HrpayrollConstant.SESSION_SALARY_DEDUCTION_LIST,
					deductionList); // "salaryDeductionList"
			session.setAttribute(
					HrpayrollConstant.SESSION_SALARY_DEDUCTION_TOTAL,
					deductionTotal); // "salaryDeductionTotal"
		}
		if (cadreList != null)
			session.setAttribute(HrpayrollConstant.SESSION_SALARY_CADRE_LIST,
					cadreList); // salaryCadreList
		if (gradeList != null)
			session.setAttribute(HrpayrollConstant.SESSION_SALARY_GRADE_LIST,
					gradeList); // "salaryGradeList"
		String FORWARD_PAGE = HrpayrollConstant.SALARY_DEDUCTIONS_DISPLAY;// "salaryDeductionsDisplay"
		return FORWARD_PAGE;
	}

	/**
	 * Method : saveDeductionsDisplay Description : Saves Salary Deductions
	 * Components List to IGRS_EMP_SALARY_MASTER
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,HttpSession
	 *            session,ValidationRule rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String saveDeductionsDisplay(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {

		logger.info("-- in SAVE DEDUCTIONS --");
		// HttpSession session = request.getSession();
		String FORWARD_PAGE = "";
		SalaryDTO salDTO = hrForm.getSalaryDTO();
		String arr[] = salDTO.getComponentIdArr();
		if (arr != null) {
			logger.info("list size :" + arr.length);
			for (int i = 0; i < arr.length; i++) {

				logger.info(salDTO.getComponentIdArr()[i] + ",");
				logger.info(salDTO.getComponentNameArr()[i] + ",");
				logger.info(salDTO.getComponentValueArr()[i]);
			}
			logger.info("Grade Id :" + salDTO.getGradeId());
			logger.info("---Cadre ID :" + salDTO.getCadreId());
			request.setAttribute("gradeName", hrBD.getGradeName(salDTO
					.getGradeId()));
			request.setAttribute("cadreName", hrBD.getCadreName(salDTO
					.getCadreId()));

			boolean flag = hrBD.updateDeductionComponents(salDTO);
			if (flag)
				FORWARD_PAGE = HrpayrollConstant.SALARY_DEDUCTIONS_SHOW_SAVED;// "salaryDeductionsShowSaved"
			else
				FORWARD_PAGE = HrpayrollConstant.ERRORS;// "error"
		}
		return FORWARD_PAGE;
	}

	/** SALARY TREASURY * */
	/**
	 * 
	 * 
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,HttpSession
	 *            session,ValidationRule rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String showTreasuryDisplay(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		logger.info("----in TREASURY DISPLAY----");
		ArrayList treasuryList = null;
		ArrayList cadreList = null;
		ArrayList gradeList = null;
		ArrayList gradeRecord = null;
		String treasuryTotal = null;
		String paymentsTotal = null;
		String deductionsTotal = null;
		String netSalary = null;
		float dedTotal = 0.0f;
		float netPay = 0.0f;
		SalaryDTO salDTO = hrForm.getSalaryDTO();
		// HttpSession session = request.getSession();
		session
				.removeAttribute(HrpayrollConstant.SESSION_SALARY_ONE_GRADE_RECORD);
		session.removeAttribute(HrpayrollConstant.SESSION_SALARY_TREASURY_LIST);
		session
				.removeAttribute(HrpayrollConstant.SESSION_SALARY_TREASURY_TOTAL);
		session.removeAttribute(HrpayrollConstant.SESSION_SALARY_DED);
		session.removeAttribute(HrpayrollConstant.SESSION_SALARY_NET);

		session.removeAttribute(HrpayrollConstant.SESSION_SALARY_CADRE_LIST);
		ArrayList errorsList = rule.validateSalaryDisplay(hrForm);
		if (rule.getError() || (errorsList != null && errorsList.size() > 0))
			request.setAttribute(HrpayrollConstant.ERRORS, errorsList);
		if (salDTO.getGradeId() != null) {
			gradeRecord = hrBD.displayGradeDetails(salDTO.getGradeId());
			cadreList = hrBD.fetchCadresForGrade(salDTO.getGradeId());
			if (salDTO.getCadreId() != null) {
				treasuryList = hrBD.fetchTreasuryDetails(salDTO.getGradeId(),
						salDTO.getCadreId());
				if (treasuryList.size() > 0)
					treasuryTotal = hrBD.getTreasuryTotal(salDTO.getGradeId(),
							salDTO.getCadreId());
				else
					treasuryTotal = "0";
				paymentsTotal = hrBD.getPaymentsTotal(salDTO.getGradeId(),
						salDTO.getCadreId());
				deductionsTotal = hrBD.getDeductionTotal(salDTO.getGradeId(),
						salDTO.getCadreId());
				treasuryTotal = hrBD.getTreasuryTotal(salDTO.getGradeId(),
						salDTO.getCadreId());
				dedTotal = Float.parseFloat(deductionsTotal)
						+ Float.parseFloat(treasuryTotal);
				netPay = Float.parseFloat(paymentsTotal) - dedTotal;
			}
		}
		if (gradeRecord != null)
			session.setAttribute(
					HrpayrollConstant.SESSION_SALARY_ONE_GRADE_RECORD,
					gradeRecord); // "gradeRecord"
		if (treasuryList.size() > 0) {
			session.setAttribute(
					HrpayrollConstant.SESSION_SALARY_TREASURY_LIST,
					treasuryList); // "salaryTreasuryList"
			session.setAttribute(
					HrpayrollConstant.SESSION_SALARY_TREASURY_TOTAL,
					treasuryTotal); // "salaryTreasuryTotal"
		}
		if (cadreList != null)
			session.setAttribute(HrpayrollConstant.SESSION_SALARY_CADRE_LIST,
					cadreList); // salaryCadreList
		if (gradeList != null)
			session.setAttribute(HrpayrollConstant.SESSION_SALARY_GRADE_LIST,
					gradeList); // "salaryGradeList"

		// Net and Ded Amounts
		session.setAttribute(HrpayrollConstant.SESSION_SALARY_DED, dedTotal
				+ ""); // "salaryDed"
		session.setAttribute(HrpayrollConstant.SESSION_SALARY_NET, netPay + ""); // "salaryNet"
		String FORWARD_PAGE = HrpayrollConstant.SALARY_TREASURY_DISPLAY; // "salaryTreasuryDisplay"
		return FORWARD_PAGE;
	}

	/**
	 * Method : saveTreasurySave Description : Saves Salary Treasury Components
	 * List to IGRS_EMP_SALARY_MASTER
	 * 
	 * @param :HrForm
	 *            hrForm,HttpServletRequest request,HttpSession
	 *            session,ValidationRule rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String saveTreasurySave(HrForm hrForm, HttpServletRequest request,
			HttpSession session, ValidationRule rule, HRPayrollBD hrBD)
			throws Exception {
		logger.info("--in SAVE TREASURY --");
		// HttpSession session = request.getSession();
		String FORWARD_PAGE = "";
		SalaryDTO salDTO = hrForm.getSalaryDTO();
		String arr[] = salDTO.getComponentIdArr();
		if (arr != null) {
			logger.info("list size :" + arr.length);
			for (int i = 0; i < arr.length; i++) {

				logger.info(salDTO.getComponentIdArr()[i] + ",");
				logger.info(salDTO.getComponentNameArr()[i] + ",");
				logger.info(salDTO.getComponentValueArr()[i]);
			}
			logger.info("Grade Id :" + salDTO.getGradeId());
			logger.info("---Cadre ID :" + salDTO.getCadreId());

			request.setAttribute("gradeName", hrBD.getGradeName(salDTO
					.getGradeId()));
			request.setAttribute("cadreName", hrBD.getCadreName(salDTO
					.getCadreId()));

			boolean flag = hrBD.updateTreasuryComponents(salDTO);
			if (flag)
				FORWARD_PAGE = HrpayrollConstant.SALARY_TREASURY_SHOW_SAVED; // "salaryTreasuryShowSaved"
			else
				FORWARD_PAGE = HrpayrollConstant.ERRORS;// "error"
		}
		return FORWARD_PAGE;
	}

	/**
	 * ***************************** GRADE - CADRE MAPPING
	 * *********************************
	 */
	/**
	 * Method : gradeCadreMapDisplay Description : Shows all Grade and Cadre
	 * Mapping relations from IGRS_GRADE_CADRE_MAPPING table
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String gradeCadreMapDisplay(HrForm hrForm,
			HttpServletRequest request, ValidationRule rule, HRPayrollBD hrBD,HttpSession session)
			throws Exception {
		ArrayList cadreList = null;
		String FORWARD_PAGE = null;
		GradeCadreDTO gcDTO = hrForm.getGcDTO();
	//	HttpSession session = request.getSession();
		ArrayList availableCadreList = null;
		ArrayList selectedCadreList = null;
		ArrayList gcList = null;
		String gradeId = "";

		gcList = hrBD.getGradesList();
		gcDTO.setGradeList(gcList);

		if (gcDTO.getGradeId() == null) {
			cadreList = hrBD.getAllCadres();
			FORWARD_PAGE = HrpayrollConstant.GRADE_CADRE_MAP_PAGE;
		}
		if (cadreList != null) {
			logger.info("CadreList");
			session.setAttribute(HrpayrollConstant.SESSION_CADRE_DISPLAY,
					cadreList); // "cadreDisplay"
		}
		logger.info("SETTING session FOR ");
		session.setAttribute(HrpayrollConstant.SESSION_GRADE_CADRE_LIST, gcDTO); // "gradeCadreList"
		return FORWARD_PAGE;
	}

	/**
	 * Method : gradeCadreMapSave Description : Saves Grade and Cadre Mapping
	 * relations to IGRS_GRADE_CADRE_MAPPING table
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String gradeCadreMapSave(HrForm hrForm, HttpServletRequest request,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		String FORWARD_PAGE = null;
		GradeCadreDTO gcDTO = hrForm.getGcDTO();
		ArrayList availableCadreList = null;
		ArrayList selectedCadreList = null;
		ArrayList gcList = null;
		String gradeId = "";
		ArrayList errorsList = rule.validateGradeCadre(hrForm);
	//	HttpSession session = request.getSession();

		gcList = hrBD.getGradesList();
		gcDTO.setGradeList(gcList);
		if (rule.getError() || (errorsList != null && errorsList.size() > 0))
			request.setAttribute(HrpayrollConstant.ERRORS, errorsList);
		boolean saved = hrBD.saveGradeCadreMapping(hrForm.getGcDTO());
		if (saved) {
			gradeId = gcDTO.getGradeId();
			logger.info("gradeId:" + gradeId);

			selectedCadreList = hrBD.getSelectedCadres(gradeId); // INSERTION
			availableCadreList = hrBD.getAvailableCadres(gradeId);// retreive
			// which are
			// not in
			// that in
			// mapping
			// table
			logger.info("selectedCadreList" + (selectedCadreList != null)
					+ "\nSize:" + selectedCadreList.size());
			logger.info("availableCadreList" + (availableCadreList != null)
					+ "\nSize:" + availableCadreList.size());

			FORWARD_PAGE = HrpayrollConstant.GRADE_CADRE_MAP_PAGE; // "gradeCadreMapPage"
		}
		logger.info("OK");
		FORWARD_PAGE = HrpayrollConstant.GRADE_CADRE_MAP_SAVE_SUCCESS; // "gradeCadreMapSaveSuccess"
		if (selectedCadreList != null) {
			logger.info("selectedCadreList");
			request.setAttribute(HrpayrollConstant.SESSION_SELECTED_CADRE_LIST,
					selectedCadreList); // "selectedCadreList"
		}
		if (availableCadreList != null) {
			logger.info("availableCadreList");
			request.setAttribute(
					HrpayrollConstant.SESSION_AVAILABLE_CADRE_LIST,
					availableCadreList); // "availableCadreList"
		}
		logger.info("SETTING session FOR ");
		request.setAttribute(HrpayrollConstant.SESSION_GRADE_CADRE_LIST, gcDTO);
		request.setAttribute("SUCCESS_MSG", "success");
		return FORWARD_PAGE;
	}

	/**
	 * Method : gradeCadreMapSearch Description : Search & Display Grade and
	 * Cadre Mapping relations from IGRS_GRADE_CADRE_MAPPING table
	 * 
	 * @param :
	 *            HrForm hrForm,HttpServletRequest request,ValidationRule
	 *            rule,HRPayrollBD hrBD
	 * @return FORWARD_PAGE : String
	 * @throws :
	 *             Exception
	 */
	private String gradeCadreMapSearch(HrForm hrForm,
			HttpServletRequest request, ValidationRule rule, HRPayrollBD hrBD,HttpSession session)
			throws Exception {
		//HttpSession session = request.getSession();
		GradeCadreDTO gcDTO = hrForm.getGcDTO();
		String gradeId = gcDTO.getGradeId();
		ArrayList gcList = null;

		logger.info("gradeId:" + gradeId);
		gcList = hrBD.getGradesList();
		gcDTO.setGradeList(gcList);

		ArrayList selectedCadreList = hrBD.getSelectedCadres(gradeId); // INSERTION
		ArrayList availableCadreList = hrBD.getAvailableCadres(gradeId);// retreive
		// which
		// are
		// not
		// in
		// that
		// in
		// mapping
		// table
		logger.info("selectedCadreList" + (selectedCadreList != null)
				+ "\nSize:" + selectedCadreList.size());
		logger.info("availableCadreList" + (availableCadreList != null)
				+ "\nSize:" + availableCadreList.size());
		String FORWARD_PAGE = HrpayrollConstant.GRADE_CADRE_MAP_PAGE;
		if (selectedCadreList != null) {
			logger.info("selectedCadreList");
			session.setAttribute(HrpayrollConstant.SESSION_SELECTED_CADRE_LIST,
					selectedCadreList); // "selectedCadreList"
		}
		if (availableCadreList != null) {
			logger.info("availableCadreList");
			session.setAttribute(
					HrpayrollConstant.SESSION_AVAILABLE_CADRE_LIST,
					availableCadreList); // "availableCadreList"
		}
		logger.info("SETTING session FOR ");
		session.setAttribute(HrpayrollConstant.SESSION_GRADE_CADRE_LIST, gcDTO);
		return FORWARD_PAGE;
	}

	/**
	 * ***************************************************EMPLOYEE - GRADE -
	 * CADRE
	 * MAPPING*******************************************************************
	 */
	/**
	 * @param hrForm
	 * @param request
	 * @param session
	 * @param rule
	 * @param hrBD
	 * @return
	 * @throws Exception
	 */
	private String employeeGradeCadreMap(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		SalaryDTO salDTO = hrForm.getSalaryDTO();
		ArrayList employeeList = null;
		ArrayList employeeGradeCadreList = null;
		employeeList = (ArrayList) session
				.getAttribute(HrpayrollConstant.SESSION_EMPLOYEE_LIST);// "employeeList
		if (employeeList == null) {
			employeeList = hrBD.fetchEmployees();
		}

		if (salDTO.getEmpId() != null) {
			employeeGradeCadreList = hrBD.fetchCadresGradeForEmp(salDTO
					.getEmpId());
		}

		ArrayList fetchSalaryComponentList = null;
		if (salDTO.getCadreId() != null) {
			fetchSalaryComponentList = hrBD.fetchSalaryComponents(salDTO
					.getGradeId(), salDTO.getCadreId(), salDTO.getTypeId());
		}
		if (employeeList != null)
			session.setAttribute(HrpayrollConstant.SESSION_EMPLOYEE_LIST,
					employeeList); // "employeeList"
		if (employeeGradeCadreList != null)
			session.setAttribute(
					HrpayrollConstant.SESSION_EMPLOYEE_GRADE_CADRE_LIST,
					employeeGradeCadreList); // "employeeGradeCadreList"
		if (fetchSalaryComponentList != null)
			request.setAttribute(
					HrpayrollConstant.SESSION_SELECTED_SALARY_COMPONENT_LIST,
					fetchSalaryComponentList); // "fetchSalaryComponentList"
		String FORWARD_PAGE = HrpayrollConstant.EMPLOYEE_GRADE_CADRE_MAP;
		return FORWARD_PAGE;
	}

	/**
	 * @param hrForm
	 * @param request
	 * @param session
	 * @param rule
	 * @param hrBD
	 * @return
	 * @throws Exception
	 */
	private String employeeGradeCadreMapSave(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		String FORWARD_PAGE = null;
		ArrayList errorsList = rule
				.validateEmployeeGradeCadreSalaryMapping(hrForm);
		SalaryDTO salDTO = hrForm.getSalaryDTO();
		ArrayList employeeList = null;
		ArrayList employeeGradeCadreList = null;
		// HttpSession session = request.getSession();

		employeeList = (ArrayList) session
				.getAttribute(HrpayrollConstant.SESSION_EMPLOYEE_LIST);// "employeeList
		if (employeeList == null) {
			employeeList = hrBD.fetchEmployees();
		}
		if (salDTO.getEmpId() != null)
			employeeGradeCadreList = hrBD.fetchCadresGradeForEmp(salDTO
					.getEmpId());
		if (rule.getError() || (errorsList != null && errorsList.size() > 0))
			FORWARD_PAGE = HrpayrollConstant.ERRORS;
		else {
			boolean inserted = hrBD.insertSalaryComponentAmount(hrForm
					.getSalaryDTO());
			if (!inserted)
				FORWARD_PAGE = HrpayrollConstant.DB_ERROR;
			else {
				String arr[] = salDTO.getComponentIdArr();
				if (arr != null) {
					for (int i = 0; i < arr.length; i++) {
					}
				}
			}
			FORWARD_PAGE = HrpayrollConstant.EMPLOYEE_GRADE_CADRE_MAP_SUBMIT;// "employeeGradeCadreMapSubmit"
		}
		return FORWARD_PAGE;
	}

	/**
	 * @param hrForm
	 * @param request
	 * @param session
	 * @param rule
	 * @param hrBD
	 * @return
	 * @throws Exception
	 */
	private String employeeGradeCadreMapSubmit(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		SalaryDTO salDTO = hrForm.getSalaryDTO();
		// HttpSession session = request.getSession();
		ArrayList employeeList = null;
		ArrayList employeeGradeCadreList = null;
		employeeList = (ArrayList) session
				.getAttribute(HrpayrollConstant.SESSION_EMPLOYEE_LIST);// "employeeList
		if (employeeList == null) {
			employeeList = hrBD.fetchEmployees();
		}
		if (salDTO.getEmpId() != null)
			employeeGradeCadreList = hrBD.fetchCadresGradeForEmp(salDTO
					.getEmpId());
		String FORWARD_PAGE = HrpayrollConstant.EMPLOYEE_GRADE_CADRE_MAP_SUBMIT;// "employeeGradeCadreMapSubmit"
		return FORWARD_PAGE;
	}

	/**
	 * *****************************************************SALARY GRADE CADRE
	 * MAPPING********************************************************************************
	 */
	/**
	 * @param hrForm
	 * @param request
	 * @param session
	 * @param rule
	 * @param hrBD
	 * @return
	 * @throws Exception
	 */
	private String getGradeCadreList(HrForm hrForm, HttpServletRequest request,
			HttpSession session, ValidationRule rule, HRPayrollBD hrBD)
			throws Exception {
		SalaryDTO salDTO = hrForm.getSalaryDTO();
		ArrayList cadreList = null;
		ArrayList gradeList = null;

		gradeList = (ArrayList) session
				.getAttribute(HrpayrollConstant.SESSION_SALARY_GRADE_LIST);
		if (gradeList == null) {
			gradeList = hrBD.fetchGrades();
		}
		if (salDTO.getGradeId() != null) {
			cadreList = hrBD.fetchCadresForGrade(salDTO.getGradeId());
		}
		if (cadreList != null)
			session.setAttribute(HrpayrollConstant.SESSION_SALARY_CADRE_LIST,
					cadreList); // salaryCadreList
		session
				.removeAttribute(HrpayrollConstant.SESSION_SELECTED_SALARY_COMPONENT_LIST);
		if (gradeList != null)
			session.setAttribute(HrpayrollConstant.SESSION_SALARY_GRADE_LIST,
					gradeList); // "salaryGradeList"
		String FORWARD_PAGE = HrpayrollConstant.SALARY_COMPONENT_ACTION;
		return FORWARD_PAGE;
	}

	/**
	 * @param hrForm
	 * @param request
	 * @param session
	 * @param rule
	 * @param hrBD
	 * @return
	 * @throws Exception
	 */
	private String getSalaryComponentList(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		SalaryDTO salDTO = hrForm.getSalaryDTO();
		ArrayList cadreList = null;
		ArrayList gradeList = null;

		ArrayList selectedSalaryComponentList = null;
		ArrayList availableSalaryComponentList = null;

		ArrayList errorsList = rule.validateSalaryComponentMapping(hrForm);
		if (rule.getError() || (errorsList != null && errorsList.size() > 0))
			request.setAttribute(HrpayrollConstant.ERRORS, errorsList);
		else {
			if (salDTO.getCadreId() != null) {
				selectedSalaryComponentList = hrBD.getSelectedSalaryComponents(
						salDTO.getGradeId(), salDTO.getCadreId(), salDTO
								.getTypeId());
				availableSalaryComponentList = hrBD
						.getAvailableSalaryComponents(salDTO.getGradeId(),
								salDTO.getCadreId()); // ,salDTO.getTypeId()
			}
			if (selectedSalaryComponentList != null)
				session
						.setAttribute(
								HrpayrollConstant.SESSION_SELECTED_SALARY_COMPONENT_LIST,
								selectedSalaryComponentList); // "selectedSalaryComponentList"
			if (availableSalaryComponentList != null)
				session
						.setAttribute(
								HrpayrollConstant.SESSION_AVAILABLE_SALARY_COMPONENT_LIST,
								availableSalaryComponentList); // "availableSalaryComponentList"
			if (cadreList != null)
				session.setAttribute(
						HrpayrollConstant.SESSION_SALARY_CADRE_LIST, cadreList); // salaryCadreList
			if (gradeList != null)
				session.setAttribute(
						HrpayrollConstant.SESSION_SALARY_GRADE_LIST, gradeList); // "salaryGradeList"
		}
		String FORWARD_PAGE = HrpayrollConstant.SALARY_COMPONENT_ACTION;
		return FORWARD_PAGE;
	}

	/**
	 * @param hrForm
	 * @param request
	 * @param rule
	 * @param hrBD
	 * @return
	 * @throws Exception
	 */
	private String mappedSalaryComponent(HrForm hrForm,
		HttpServletRequest request, HttpSession session,
		ValidationRule rule, HRPayrollBD hrBD) throws Exception {
	SalaryDTO salDTO = hrForm.getSalaryDTO();

	String FORWARD_PAGE = null;
	ArrayList cadreList = null;
	ArrayList gradeList = null;
	ArrayList errorsList = rule.validateSalaryComponentMapping(hrForm);
	if (rule.getError() || (errorsList != null && errorsList.size() > 0))
		request.setAttribute(HrpayrollConstant.ERRORS, errorsList);
	else {
	    	String empId = (String) session.getAttribute("UserId");
		boolean saved = hrBD.saveGradeCadreSalaryComponentMapping(hrForm.getSalaryDTO(),empId);
		if (!saved) {
			FORWARD_PAGE = HrpayrollConstant.DB_ERROR;
		} else {
			ArrayList paymentComponentList = null;
			ArrayList agDeductionComponentList = null;
			ArrayList treasuryComponentList = null;

			gradeList = (ArrayList) session
					.getAttribute(HrpayrollConstant.SESSION_SALARY_GRADE_LIST);
			cadreList = (ArrayList) session
					.getAttribute(HrpayrollConstant.SESSION_SALARY_CADRE_LIST);
			if (salDTO.getCadreId() != null) {
				paymentComponentList = hrBD.getPaymentComponentsForDisplay(
						salDTO.getGradeId(), salDTO.getCadreId(),salDTO.getTypeId());
				agDeductionComponentList = hrBD
						.getAgDeductionComponentsForDisplay(salDTO.getGradeId(), salDTO.getCadreId(),salDTO.getTypeId());
				treasuryComponentList = hrBD
						.getTreasuryComponentsForDisplay(salDTO
								.getGradeId(), salDTO.getCadreId(),salDTO.getTypeId());

			} else {
				paymentComponentList = null;
				agDeductionComponentList = null;
				treasuryComponentList = null;
			}
			if (paymentComponentList != null
					&& paymentComponentList.size() > 0)
				request.setAttribute(
						HrpayrollConstant.SESSION_PAYMENT_COMPONENT_LIST,
						paymentComponentList); // "paymentComponentList"
			if (agDeductionComponentList != null
					&& agDeductionComponentList.size() > 0)
				request
						.setAttribute(
								HrpayrollConstant.SESSION_AGDEDUCTION_COMPONENT_LIST,
								agDeductionComponentList); // "agDeductionComponentList"
			if (treasuryComponentList != null
					&& treasuryComponentList.size() > 0)
				request.setAttribute(
						HrpayrollConstant.SESSION_TREASURY_COMPONENT_LIST,
						treasuryComponentList); // "treasuryComponentList"
			if (cadreList != null)
				session.setAttribute(
						HrpayrollConstant.SESSION_SALARY_CADRE_LIST,
						cadreList); // salaryCadreList
			if (gradeList != null)
				session.setAttribute(
						HrpayrollConstant.SESSION_SALARY_GRADE_LIST,
						gradeList); // "salaryGradeList"

		}
		FORWARD_PAGE = HrpayrollConstant.MAPPED_SALARY_COMPONENT_DISPLAY; // "mappedSalaryComponentDisplay"
	}
	return FORWARD_PAGE;
}

	/**
	 * @param hrForm
	 * @param request
	 * @param session
	 * @param rule
	 * @param hrBD
	 * @return
	 * @throws Exception
	 */
	private String getSalaryComponentListForView(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {

		SalaryDTO salDTO = hrForm.getSalaryDTO();
		ArrayList cadreList = null;
		ArrayList gradeList = null;

		ArrayList paymentComponentList = null;
		ArrayList agDeductionComponentList = null;
		ArrayList treasuryComponentList = null;

		gradeList = (ArrayList) session
				.getAttribute(HrpayrollConstant.SESSION_SALARY_GRADE_LIST);
		cadreList = (ArrayList) session
				.getAttribute(HrpayrollConstant.SESSION_SALARY_CADRE_LIST);
		if (salDTO.getCadreId() != null) {
			paymentComponentList = hrBD.getPaymentComponentsForDisplay(salDTO
					.getGradeId(), salDTO.getCadreId(),salDTO.getTypeId());
			agDeductionComponentList = hrBD.getAgDeductionComponentsForDisplay(salDTO.getGradeId(), salDTO.getCadreId(),salDTO.getTypeId());
			treasuryComponentList = hrBD.getTreasuryComponentsForDisplay(salDTO.getGradeId(), salDTO.getCadreId(),salDTO.getTypeId());

		}
		if (paymentComponentList != null && paymentComponentList.size() > 0)
			request.setAttribute(
					HrpayrollConstant.SESSION_PAYMENT_COMPONENT_LIST,
					paymentComponentList); // "paymentComponentList"
		if (agDeductionComponentList != null
				&& agDeductionComponentList.size() > 0)
			request.setAttribute(
					HrpayrollConstant.SESSION_AGDEDUCTION_COMPONENT_LIST,
					agDeductionComponentList); // "agDeductionComponentList"
		if (treasuryComponentList != null && treasuryComponentList.size() > 0)
			request.setAttribute(
					HrpayrollConstant.SESSION_TREASURY_COMPONENT_LIST,
					treasuryComponentList); // "treasuryComponentList"
		if (cadreList != null)
			session.setAttribute(HrpayrollConstant.SESSION_SALARY_CADRE_LIST,
					cadreList); // salaryCadreList
		if (gradeList != null)
			session.setAttribute(HrpayrollConstant.SESSION_SALARY_GRADE_LIST,
					gradeList); // "salaryGradeList"
		String FORWARD_PAGE = HrpayrollConstant.MAPPED_SALARY_COMPONENT_DISPLAY;
		return FORWARD_PAGE;
	}

	/**
	 * @param hrForm
	 * @param request
	 * @param session
	 * @param rule
	 * @param hrBD
	 * @return
	 * @throws Exception
	 */
	private String salaryStartDisplay(HrForm hrForm,
			HttpServletRequest request, HttpSession session,
			ValidationRule rule, HRPayrollBD hrBD) throws Exception {
		SalaryDTO salDTO = hrForm.getSalaryDTO();
		ArrayList cadreList = null;
		ArrayList gradeList = null;

		gradeList = (ArrayList) session
				.getAttribute(HrpayrollConstant.SESSION_SALARY_GRADE_LIST);
		if (gradeList == null) {
			gradeList = hrBD.fetchGrades();
		}
		if (salDTO.getGradeId() != null) {
			cadreList = hrBD.fetchCadresForGrade(salDTO.getGradeId());
		}
		if (cadreList != null)
			session.setAttribute(HrpayrollConstant.SESSION_SALARY_CADRE_LIST,
					cadreList); // salaryCadreList
		if (gradeList != null)
			session.setAttribute(HrpayrollConstant.SESSION_SALARY_GRADE_LIST,
					gradeList); // "salaryGradeList"
		String FORWARD_PAGE = HrpayrollConstant.MAPPED_SALARY_COMPONENT_DISPLAY;
		return FORWARD_PAGE;
	}

}// class

