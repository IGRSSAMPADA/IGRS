/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */

package com.wipro.igrs.sp.action;

import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.upload.FormFile;

import com.wipro.igrs.baseaction.action.BaseAction;
import com.wipro.igrs.common.AuditInspectionConstant;
import com.wipro.igrs.sp.dto.ServiceProviderDTO;
import com.wipro.igrs.sp.form.ServiceProviderUploadForm;
import com.wipro.igrs.sp.rule.ServiceProviderRule;

/**
 * MyEclipse Struts Creation date: 06-26-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class SPUploadAction1 extends BaseAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	private Logger logger = 
		(Logger) Logger.getLogger(SPUploadAction1.class);
	
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,HttpSession session) {
		// TODO Auto-generated method stub
		ActionErrors errors = new ActionErrors();
		ActionForward forward = new ActionForward(); // return value
		
		ServiceProviderUploadForm uploadForm = (ServiceProviderUploadForm) form;
		//HttpSession session = request.getSession();
		ArrayList errorList = new ArrayList();
		
		//commented by shruti for avoiding deployment issues
		String filePath = getServlet().getServletContext().getRealPath("")
				+ "/images/";
	
		
		//String filePath="D:/upload/";
		
		
		session.setAttribute("FilePath", filePath);
		// AuditInspectionRule rule = null;
		ServiceProviderRule rule = null;
		int currFileSize = 0;

		logger.info("In SRO UPLOAD action");

		if (uploadForm.getAttachAction().equalsIgnoreCase("attach")) {
			logger.info("Test I am in Attach Block");
			if (session.getAttribute("attachment1") == null) {
				// Get the list of files
				
				FormFile strFileName = uploadForm.getTheFile();
				logger.info("file type:" + strFileName.getContentType());
				logger.info("File Name " + strFileName.getFileName());
				int size = strFileName.getFileSize();
				System.out
						.println("SRO UPLOAD FILE SIZE WHEN SESSION IS NOT CREATED :"
								+ size);
				//added by shruti
				File folder=new File(filePath);
				if(!folder.exists())
				{
					folder.mkdir();
				}
				String fileName=strFileName.getFileName();
				
				//end of code
				
				// save file in the app server
				String fileExt = getFileExtension(strFileName.getFileName());
				
				logger.info("File Extenssion :" + fileExt);
				rule = new ServiceProviderRule();
				errorList = rule.validateFileType(fileExt);
				if (rule.isError()) {
					request.setAttribute("errorsList", errorList);
					return mapping.findForward("spUpload1");
				} else if (size > AuditInspectionConstant.MAX_FILE_SIZE) {
					errorList
							.add("<li><font color="
									+ "red"
									+ ">File Size is Greater Than 10MB,Please Select Other File.</font></li>");
					request.setAttribute("errorsList", errorList);
					return mapping.findForward("spUpload1");

				} else {

					try {
						//File newFile = new File(filePath
								//+ strFileName.getFileName());
						
						//added by shruti
						File newFile=new File(filePath,fileName);
						logger.info("NEW FILE NAME:-"+newFile);
						//end of code
						
						FileOutputStream fos = new FileOutputStream(newFile);
						fos.write(strFileName.getFileData());
						fos.close();
					} catch (Exception ex) {
						ex.printStackTrace();
					}
					ArrayList lsUPloadDTO = new ArrayList();
					ServiceProviderDTO uploadFileDTO = new ServiceProviderDTO();
					// UploadFileDTO uploadFileDTO = new UploadFileDTO();
					uploadFileDTO.setFileName(strFileName.getFileName());// set
																			// doctype
																			// to
																			// uploaddto
					uploadFileDTO.setFileSize(size);

					lsUPloadDTO.add(uploadFileDTO);
					session.setAttribute("attachment1", lsUPloadDTO);
				}
			}
			return (mapping.findForward("spClose1"));
		}// end 

		if (uploadForm.getRemoveAction().equalsIgnoreCase("remove")) {
			logger.info("SRO UPLOAD Action :"
					+ uploadForm.getRemoveAction());
			ArrayList arrList = (ArrayList) session.getAttribute("attachment1");

			try {
				String param[] = request.getParameterValues("checkbox");
				for (int i = 0; i < param.length; i++) {
					String checkedFileName = param[i];
					logger.info("Checked SRO UPLOAD File Name :"
							+ checkedFileName);
					for (int j = 0; j < arrList.size(); j++) {
						ServiceProviderDTO uploadFileDTO = (ServiceProviderDTO) arrList
								.get(j);
						if (uploadFileDTO.getFileName().equalsIgnoreCase(
								checkedFileName)) {
							File newFile = new File(filePath + checkedFileName);
							newFile.delete();
							arrList.remove(j);
						}
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();
			}
			session.removeAttribute("attachemnt1");
			session.setAttribute("attachment1", arrList);
			return mapping.findForward("spUpload1");
		}
		logger.info("End of SRO UPLOAD action");

		return mapping.findForward("spUpload1");
	}

	private String getFileExtension(String fileName) {
		int pos = fileName.lastIndexOf(".");
		String strExt = fileName.substring(pos + 1, fileName.length());
		return strExt;
	}
}
